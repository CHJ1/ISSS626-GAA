---
title: "Hands-on_Ex02"
author: "CHJ1"
---

Install R packages

```{r}
pacman::p_load(sf, terra, spatstat, 
               tmap, rvest, tidyverse)
```

Importing and Wrangling Geospatial Data Sets

```{r}
mpsz_sf <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml") %>% 
  st_zm(drop = TRUE, what = "ZM") %>% st_transform(crs = 3414)
```
```{r}
extract_kml_field <- function(html_text, field_name) {
  if (is.na(html_text) || html_text == "") return(NA_character_)
  
  page <- read_html(html_text)
  rows <- page %>% html_elements("tr")
  
  value <- rows %>%
    keep(~ html_text2(html_element(.x, "th")) == field_name) %>%
    html_element("td") %>%
    html_text2()
  
  if (length(value) == 0) NA_character_ else value
}
```

```{r}
mpsz_sf <- mpsz_sf %>%
  mutate(
    REGION_N = map_chr(Description, extract_kml_field, "REGION_N"),
    PLN_AREA_N = map_chr(Description, extract_kml_field, "PLN_AREA_N"),
    SUBZONE_N = map_chr(Description, extract_kml_field, "SUBZONE_N"),
    SUBZONE_C = map_chr(Description, extract_kml_field, "SUBZONE_C")
  ) %>%
  select(-Name, -Description) %>%
  relocate(geometry, .after = last_col())
```

```{r}
mpsz_cl <- mpsz_sf %>%
  filter(SUBZONE_N != "SOUTHERN GROUP",
         PLN_AREA_N != "WESTERN ISLANDS",
         PLN_AREA_N != "NORTH-EASTERN ISLANDS")
```

```{r}
write_rds(mpsz_cl, 
          "data/mpsz_cl.rds")
``` 

```{r}
childcare_sf <- st_read("data/ChildCareServices.kml") %>% 
  st_zm(drop = TRUE, what = "ZM") %>%
  st_transform(crs = 3414)    
```  
         
Mapping the geospatial data sets     
         
```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
``` 

Geospatial Data wrangling

Converting sf data frames to ppp class

```{r}
childcare_ppp <- as.ppp(childcare_sf)
``` 

```{r}
class(childcare_ppp)
``` 

```{r}
summary(childcare_ppp)
``` 

Creating owin object

```{r}
sg_owin <- as.owin(mpsz_cl)
``` 

```{r}
class(sg_owin)
``` 

```{r}
plot(sg_owin)
``` 

Combining point events object and owin object

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
``` 

```{r}
childcareSG_ppp
``` 

Clark-Evan Test for Nearest Neighbour Analysis

Perform the Clark-Evans test without CSR

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"))
``` 

Perform the Clark-Evans test with CSR

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                method="MonteCarlo",
                nsim=99)
``` 

Kernel Density Estimation Method

Working with automatic bandwidth selection method

```{r}
kde_SG_diggle <- density(
  childcareSG_ppp,
  sigma=bw.diggle,
  edge=TRUE,
  kernel="gaussian") 
``` 

```{r}
plot(kde_SG_diggle)
``` 

```{r}
summary(kde_SG_diggle)
``` 

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
``` 

Rescalling KDE values

```{r}
childcareSG_ppp_km <- rescale.ppp(
  childcareSG_ppp, 1000, "km")
``` 

```{r}
kde_childcareSG_km <- density(childcareSG_ppp_km,
                              sigma=bw.diggle,
                              edge=TRUE,
                              kernel="gaussian")
``` 

```{r}
plot(kde_childcareSG_km)
``` 

Working with different automatic badwidth methods

```{r}
bw.CvL(childcareSG_ppp_km)
``` 

```{r}
bw.scott(childcareSG_ppp_km)
``` 

```{r}
bw.ppl(childcareSG_ppp_km)
``` 

```{r}
bw.diggle(childcareSG_ppp_km)
``` 

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp_km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG_km, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
``` 

Working with different kernel methods

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp_km, 
             sigma=0.2959712, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp_km, 
             sigma=0.2959712, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp_km, 
             sigma=0.2959712, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp_km, 
             sigma=0.2959712, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
``` 

Fixed and Adaptive KDE

Computing KDE by using fixed bandwidth

```{r}
kde_childcareSG_fb <- density(childcareSG_ppp_km,
                              sigma=0.6, 
                              edge=TRUE,
                              kernel="gaussian")
plot(kde_childcareSG_fb)
``` 

Computing KDE by using adaptive bandwidth

```{r}
kde_childcareSG_ab <- adaptive.density(
  childcareSG_ppp_km, 
  method="kernel")
plot(kde_childcareSG_ab)
``` 

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG_fb, main = "Fixed bandwidth")
plot(kde_childcareSG_ab, main = "Adaptive bandwidth")
``` 

Plotting cartographic quality KDE map

Converting gridded output into raster

```{r}
kde_childcareSG_bw_terra <- rast(kde_childcareSG_km)
``` 

```{r}
class(kde_childcareSG_bw_terra)
``` 

```{r}
kde_childcareSG_bw_terra
``` 

Assigning projection systems

```{r}
crs(kde_childcareSG_bw_terra) <- "EPSG:3414"
``` 

```{r}
kde_childcareSG_bw_terra
``` 

Plotting KDE map with tmap

```{r}
tm_shape(kde_childcareSG_bw_terra) +
  tm_raster(
    palette = "viridis",
    title = "Density values"
  ) +
  tm_graticules(labels.size = 0.7) +
  tm_compass() +
  tm_layout(
    scale = 1.0,
    legend.position = c("right", "bottom"),
    legend.bg.color = "white",
    legend.bg.alpha = 0.7,
    legend.frame = TRUE,
    title.size = 0.7,          
    legend.text.size = 0.7,    
    legend.title.size = 0.7    
  )
``` 

First Order SPPA at the Planning Subzone Level

Geospatial data wrangling

```{r}
pg <- mpsz_cl %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_cl %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_cl %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_cl %>%
  filter(PLN_AREA_N == "JURONG WEST")
``` 

```{r}
par(mfrow=c(2,2))
plot(st_geometry(pg), main = "Ponggol")
plot(st_geometry(tm), main = "Tampines")
plot(st_geometry(ck), main = "Choa Chu Kang")
plot(st_geometry(jw), main = "Jurong West")
``` 

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
``` 

```{r}
childcare_pg_ppp = childcare_ppp[pg_owin]
childcare_tm_ppp = childcare_ppp[tm_owin]
childcare_ck_ppp = childcare_ppp[ck_owin]
childcare_jw_ppp = childcare_ppp[jw_owin]
``` 

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
``` 

```{r}
par(mfrow=c(2,2))
plot(unmark(childcare_pg_ppp.km), 
  main="Punggol")
plot(unmark(childcare_tm_ppp.km), 
  main="Tampines")
plot(unmark(childcare_ck_ppp.km), 
  main="Choa Chu Kang")
plot(unmark(childcare_jw_ppp.km), 
  main="Jurong West")
``` 

Clark and Evans Test

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
``` 

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
``` 

Computing KDE surfaces by planning area

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
``` 

2nd Order Spatial Point Patterns Analysis Methods

Analysing Spatial Point Process Using G-Function

Choa Chu Kang planning area

```{r}
set.seed(1234)
``` 

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
``` 

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
``` 

```{r}
plot(G_CK.csr)
``` 

Tampines planning area

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
``` 

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
``` 

```{r}
plot(G_tm.csr)
``` 

Analysing Spatial Point Process Using F-Function

Choa Chu Kang planning area

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
``` 

Performing Complete Spatial Randomness Test

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
``` 

```{r}
plot(F_CK.csr)
``` 

Tampines planning area

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
``` 

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
``` 

```{r}
plot(F_tm.csr)
``` 

Analysing Spatial Point Process Using K-Function

Choa Chu Kang planning area

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
``` 

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
``` 

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
``` 

Tampines planning area

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
``` 

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
``` 

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
``` 

Analysing Spatial Point Process Using L-Function

Choa Chu Kang planning area

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
``` 

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
``` 

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
``` 

Tampines planning area

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
``` 

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
``` 

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
``` 

